# these are modules we will use to handle command line parameters and zip files
import sys
import zipfile

# The first command line parameter is the script name itself, which is sys.argv[0] 
# (remember that Python starts counting at 0). To determine if we have more arguments than
# just the script name itself, we can check the length of argv using the len() function
# which you have previously used in LPTHW exercises. The neat thing is that argv is 
# actually a list, so you can iterate over it like a list (with a for loop) and use index
# operators on it. We want the second command line parameter, sys.argv[1], which will be
# the name of the zip file we want to crack. This script gives a friendly error message
# if the user doesn't invoke the script correctly.
#
# Don't worry about understanding the zipfile module code just yet, especially if you're
# confused already. If you can handle an extra challenge, read the docs:
# https://docs.python.org/2/library/zipfile.html

def try_passwords(next_password):
    try:
        current_password = next_password.strip()  # this removes extra whitespace: IMPORTANT!
        print 'Trying password %s' % current_password
        zip.setpassword(current_password)
        zip.extractall()
        print 'The password is %s' % current_password
        sys.exit(0)  # the program will exit successfully once the password is found
    except Exception:
        print '\tWRONG PASSWORD'


if len(sys.argv) > 1:
    zip_file = sys.argv[1]
    zip = zipfile.ZipFile(zip_file, 'r')
else:
    print "You must start the script with the file name of the zip file you want to " \
          "crack as a command line parameter, e.g. 'python assn5.py crackmeifyoucan.zip'"
    sys.exit(1)  # this exits the program and tells the operating system it had an error

# we need to open the file with our 'dictionary' of common passwords in this case
password_file = open('common_passwords.txt', 'rb')

# this is how we can read one line in a file, but writing this same thing over and over
# 10,000 times would be extremely tedious! Use a loop to iterate through the file. You
# can actually treat the file like a list, like so: 'for line in password_file:'
for next_password in password_file:
    try_passwords(next_password)

# this is how we attempt to open the zip file with the password contained on the current
# line of the file. Turn this into a function so that it can be called from inside the
# loop that iterates through each line (password) in the file. Don't worry if you don't
# understand this line of code, it is specific to the zipfile library. We'll learn about
# using different libraries more as the course progresses. Also, don't worry about the
# try and except blocks just yet. We'll learn more about exception handling in week 8.
# For now, just place this entire block inside a function so that you don't have to repeat
# it every time you try a password.
# FUNCTION STARTS HERE (delete this once you've made it a function)


# don't forget to close files after opening them!
zip.close()
password_file.close()
# the password is wolfpack. 
